#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os
from collections import namedtuple

knapsack_dict={}

Item = namedtuple("Item", ['index', 'value', 'weight'])

def solve_it(input_data):
    # Modify this code to run your optimization algorithm

    # parse the input
    lines = input_data.split('\n')

    firstLine = lines[0].split()

    item_count = int(firstLine[0])
    capacity = int(firstLine[1])

    items = []

    for i in range(1, item_count+1):
        line = lines[i]
 
        parts = line.split()
        items.append(Item(i-1, int(parts[0]), int(parts[1])))
 
    # a trivial greedy algorithm for filling the knapsack
    # it takes items in-order until the knapsack is full

    value = 0
    weight = 0
    taken = [0]*len(items)

    optimal_value = knapsack_value(capacity,0,item_count,items)
    taken = knapsack_select(optimal_value,capacity, item_count, items,taken)

    output_data = str(optimal_value) + ' ' + str(0) + '\n'
    output_data += ' '.join(map(str, taken))
 
    return output_data

def knapsack_value(K,idx,item_count,items):
   
    if idx > item_count-1:
        if knapsack_dict.get((K,idx),-99) == -99:
            knapsack_dict[K,idx]=0

        return knapsack_dict[K,idx]

    elif K < items[idx][2]:

        if knapsack_dict.get((K,idx+1),-99) == -99:
            knapsack_dict[K,idx+1]=knapsack_value(K,idx+1,item_count,items)

        return knapsack_dict[K,idx+1]
    
    else:

        if knapsack_dict.get((K,idx+1),-99) == -99:
            knapsack_dict[K,idx+1]=knapsack_value(K,idx+1,item_count,items)

        if knapsack_dict.get((K-items[idx][2],idx+1),-99) == -99:
            knapsack_dict[K-items[idx][2],idx+1]=knapsack_value(K-items[idx][2],idx+1,item_count,items)
            
        option1=knapsack_dict[K,idx+1]
        option2=items[idx][1]+knapsack_dict[K-items[idx][2],idx+1]
        
        return max(option1,option2)


def knapsack_select(optimal_value,capacity, item_count, items, taken):

    for i in range(item_count):
        wt_i=items[i][2]
        val_i=items[i][1]
        
        for j in range(item_count):
            if j!=i: wt_i=wt_i + taken[j]*items[j][2]
        
        for j in range(item_count):
            if j!=i: val_i=val_i + taken[j]*items[j][1]        

        LHS = ((knapsack_dict.get((capacity-wt_i,i+1),-99)))
        RHS = ((optimal_value - val_i))

        if LHS == RHS:
            taken[i]=1

    return taken

if __name__ == '__main__':
    if len(sys.argv) > 1:
        file_location = sys.argv[1].strip()
        input_data_file = open(file_location, 'r')
        input_data = ''.join(input_data_file.readlines())
        input_data_file.close()
        
        print (solve_it(input_data))
    else:
        print ('This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/ks_4_0)')

