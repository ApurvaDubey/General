#!/usr/bin/python
# -*- coding: utf-8 -*-

import random

rng=range(0,8)

# define decision variables
# the value of decision variables will be between 0 and 8 (both inclusive)
row_of_column=[-1 for x in rng]

def decision_var_reset(row_of_column):
    row_of_column=[-1 for x in rng]
# print row_of_column # 0 -> 1st column, 7 -> 8th column of chessboard

# define chessboard
chess_board={(x,y):0 for x in rng for y in rng}

def chess_board_reset(chess_board):
    for x in rng:
        for y in rng:
            chess_board[x,y]=0
    # print chess_board

def constraint_check(row_of_column):
    flag=1
    for i in rng:
        for j in rng:
            if i != j:
                slope = abs(float(row_of_column[j] - row_of_column[i])/float(j-i))
                #print "slope", slope
                if slope == 1: flag=0

        if row_of_column[j]==-1 or row_of_column[i]==-1:
            flag=0
            
    #print "flag", flag
    return flag
    
# print number of open postions 
def open_positions(q):
    return "Number of open positions before placement of queen#",q,"is:", 64-sum(chess_board.values())

# propogate constraints
def constraint_propogation(q):

    #print (open_positions(q))
        
    for i in rng:
        chess_board[q,i]=1 # column is occupied

        if row_of_column[q] in rng:
            chess_board[i,row_of_column[q]]=1 # row is occupied
        
        if (q+i in rng) and (row_of_column[q]+i in rng):
            chess_board[q+i,row_of_column[q]+i]=1 # upper right diagonal is occupied
            
        if (q+i in rng) and (row_of_column[q]-i in rng):
            chess_board[q+i,row_of_column[q]-i]=1 # lower right diagonal is occupied
            
        if (q-i in rng) and (row_of_column[q]-i in rng):
            chess_board[q-i,row_of_column[q]-i]=1 # lower left diagonal is occupied
            
        if (q-i in rng) and (row_of_column[q]+i in rng):
            chess_board[q-i,row_of_column[q]+i]=1 # upper left diagonal is occupied
            
def queen_placement(q):
    for i in rng:
        if chess_board[q,i]==0:
            row_of_column[q]=i
            break
        if i==7 and row_of_column[q]==-1:
            pass #print "No place to put queen #",q," ABORT"


    
chess_board_reset(chess_board)

# let's define a random configuration and check
# whether it satifies the constraints or not
row_of_column=[3, 7, 0, 2, 5, 1, 6, 4]
print row_of_column
print constraint_check(row_of_column)


# now let's try to solve this problem

# the first queen can be placed anywhere on the first row
# let's use the symmetry and place the first queen in
# the first four rows

for q in rng:
    if q==0:
        row_of_column[q]=random.randint(0,3)
    else:
        queen_placement(q)
    constraint_propogation(q)
    #print q,len(chess_board)

print row_of_column,constraint_check(row_of_column)

##############
print '########################'


chess_board_reset(chess_board)
#print chess_board

def range_queen_placement(q):
    L=[]
    #print chess_board
    for i in rng:
        if chess_board[q,i]==0:
            L.append(i)
                        
    #print L
    return L


for q0 in range(0,4):
    row_of_column[0]=q0        
    constraint_propogation(0)
  
    for q1 in (range_queen_placement(1)):
        row_of_column[1]=q1
        constraint_propogation(1)

        for q2 in (range_queen_placement(2)):
            row_of_column[2]=q2
            constraint_propogation(2)


            for k in range(3,8): row_of_column[k]=-1
        
            for q in range(3,8):
                queen_placement(q)
                #print (open_positions(q))
                constraint_propogation(q)
                #print q,len(chess_board)

            if constraint_check(row_of_column)==1:
                print q0,q1,q1,row_of_column,constraint_check(row_of_column)
        
            chess_board_reset(chess_board) #q2

            row_of_column[1]=q1    
            constraint_propogation(1)

        chess_board_reset(chess_board) #q1
        
        row_of_column[0]=q0    
        constraint_propogation(0)

    chess_board_reset(chess_board) # q0


    


